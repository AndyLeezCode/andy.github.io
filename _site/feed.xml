<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-18T17:46:16+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2023/03/18/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2023-03-18T17:41:15+08:00</published><updated>2023-03-18T17:41:15+08:00</updated><id>http://localhost:4000/jekyll/update/2023/03/18/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/03/18/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">Test</title><link href="http://localhost:4000/2023/03/18/Test.html" rel="alternate" type="text/html" title="Test" /><published>2023-03-18T00:00:00+08:00</published><updated>2023-03-18T00:00:00+08:00</updated><id>http://localhost:4000/2023/03/18/Test</id><content type="html" xml:base="http://localhost:4000/2023/03/18/Test.html"><![CDATA[<h1 id="优化挖井问题一种贪婪算法解决方案">优化挖井问题：一种贪婪算法解决方案</h1>

<h2 id="目录">目录</h2>
<ol>
  <li>问题介绍</li>
  <li>算法思路</li>
  <li>贪婪算法详解</li>
  <li>证明算法正确性</li>
  <li>归并排序的分层概念与贪婪算法</li>
</ol>

<h2 id="1-问题介绍">1. 问题介绍</h2>
<p>考虑一个乡村道路（假设为一条带有左右端点的长线段），沿着道路有一组房屋。不幸的是，该地区没有自来水，房屋居民只能通过挖井获得水。作为社区领导者，您希望在道路的某些位置挖井，使得每个房子距离水井至多四英里。本文介绍了一种高效的算法来实现这一目标，同时最小化挖井的数量，并证明了算法的正确性。</p>

<p><img src="image-url" alt="Rural road with houses and wells" /></p>

<h2 id="2-算法思路">2. 算法思路</h2>
<p>这是一个可以使用贪婪算法解决的经典优化问题。要最小化挖井数量，我们需要找到一个方法，在尽可能覆盖更多房屋的情况下，确定井的位置。</p>

<h2 id="3-贪婪算法详解">3. 贪婪算法详解</h2>
<ol>
  <li>按照房子在道路上的位置对房子进行排序。这一步的时间复杂度为 O(n log n)，其中 n 是房子的数量。</li>
  <li>初始化一个空列表用来存储水井的位置，并将指针设置为排序列表中的第一个房子。</li>
  <li>遍历排序后的房子列表，对于每一个房子：
a. 如果房子距离水井的位置超过四英里，将指针从当前房子的位置向右移动四英里。这个新位置就是要挖水井的位置。
b. 将新水井的位置添加到水井位置列表中。</li>
  <li>当所有房子都被访问后，算法终止。水井位置列表表示所需的最少水井数量。</li>
</ol>

<p><img src="image-url" alt="Greedy algorithm illustration" /></p>

<h2 id="4-证明算法正确性">4. 证明算法正确性</h2>
<p>我们通过反证法证明算法的正确性。假设存在一个比我们的算法更优的解，它需要挖的水井更少。由于我们算法中的第一个水井覆盖了尽可能多的房子，最优解中的第一个水井必然覆盖了更少的房子。因此，为了覆盖所有的房子，最优解必须比我们的算法需要更多的水井，这与</p>]]></content><author><name></name></author><summary type="html"><![CDATA[优化挖井问题：一种贪婪算法解决方案]]></summary></entry></feed>